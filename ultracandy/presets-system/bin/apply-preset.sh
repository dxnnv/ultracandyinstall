#!/usr/bin/env bash
set -euo pipefail

UC_DIR="${HOME}/.config/ultracandy"
PRESETS_DIR="${UC_DIR}/presets"
MAP_FILE="${UC_DIR}/wallpaper-map.toml"

CONFIG_BG="${HOME}/.config/background"

HYPR_COLORS="${HOME}/.config/hypr/colors.conf"
WAYBAR_COLORS="${HOME}/.config/waybar/colors.css"
SWAYNC_COLORS="${HOME}/.config/swaync/colors.css"
KITTY_COLORS="${HOME}/.config/kitty/colors.conf"
ROFI_COLORS="${HOME}/.config/rofi/colors.rasi"
ROFI_FONT="${HOME}/.config/hyprcandy/settings/rofi-font.rasi"

RENDER="${UC_DIR}/bin/render-palette.sh"

log()  { printf "[uc] %s\n" "$*" >&2; }
warn() { printf "[uc:warn] %s\n" "$*" >&2; }

PRESET=""
WALLPAPER=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --preset)    PRESET="${2:-}"; shift 2 ;;
    --wallpaper) WALLPAPER="${2:-}"; shift 2 ;;
    -h|--help)   echo "Usage: $(basename "$0") [--preset NAME] [--wallpaper PATH]"; exit 0 ;;
    *)           shift ;;
  esac
done

mkdir -p "${PRESETS_DIR}" \
         "$(dirname "${HYPR_COLORS}")" "$(dirname "${WAYBAR_COLORS}")" \
         "$(dirname "${SWAYNC_COLORS}")" "$(dirname "${KITTY_COLORS}")" \
         "$(dirname "${ROFI_COLORS}")" "$(dirname "${ROFI_FONT}")"

if [[ -z "${WALLPAPER}" ]]; then
  [[ -f "${CONFIG_BG}" ]] && WALLPAPER="$(< "${CONFIG_BG}")" || WALLPAPER=""
fi

resolve_preset_by_wall() {
  local wp="$1"; [[ -z "$wp" ]] && return 1
  local name="${wp##*/}"; name="${name%.*}"
  [[ -d "${PRESETS_DIR}/${name}" ]] && { echo "$name"; return 0; }
  [[ -f "${MAP_FILE}" ]] || return 1
  awk '
    /^\[\[map\]\]/{inmap=1; next}
    inmap && /^pattern *= *"/{ p=$0; sub(/^pattern *= *"/,"",p); sub(/" *$/,"",p); pattern=p; next }
    inmap && /^preset *= *"/{ r=$0; sub(/^preset *= *"/,"",r); sub(/" *$/,"",r); preset=r; print pattern "|" preset; inmap=0 }
  ' "${MAP_FILE}" | while IFS='|' read -r pat pre; do
    if [[ "${wp}" == ${pat} ]]; then echo "${pre}"; return 0; fi
  done
  return 1
}

if [[ -z "${PRESET}" ]]; then
  PRESET="$(resolve_preset_by_wall "${WALLPAPER}")" || PRESET=""
fi

if [[ -z "${PRESET}" ]]; then
  if command -v matugen >/dev/null 2>&1 && [[ -n "${WALLPAPER}" ]]; then
    matugen image "${WALLPAPER}" --type scheme-content --contrast 0.7 || true
    hyprctl reload >/dev/null 2>&1 || true
    systemctl --user restart waybar.service || {
      pkill waybar 2>/dev/null || true
      nohup waybar --config "${HOME}/.config/waybar/config.jsonc" --style "${HOME}/.config/waybar/style.css" >/dev/null 2>&1 &
    }
    pkill -f swaync 2>/dev/null || true
    nohup swaync >/dev/null 2>&1 &
    exit 0
  else
    echo "[uc] No preset and no Matugen; nothing to do." >&2
    exit 1
  fi
fi

PRESET_DIR="${PRESETS_DIR}/${PRESET}"
[[ -d "${PRESET_DIR}" ]] || { echo "[uc] Preset not found: ${PRESET_DIR}" >&2; exit 1; }

VARS="${PRESET_DIR}/variables.env"
[[ -f "${VARS}" ]] && source "${VARS}"

FONT_NAME="${FONT_NAME:-JetBrainsMono Nerd Font Propo}"
FONT_SIZE="${FONT_SIZE:-11}"
CURSOR_THEME="${CURSOR_THEME:-Bibata-Modern-Ice}"
CURSOR_SIZE="${CURSOR_SIZE:-24}"
ICON_THEME="${ICON_THEME:-Tela circle black}"
TERMINAL_CMD="${TERMINAL:-kitty}"

PALETTE="${PRESET_DIR}/palette.toml"
[[ -x "${RENDER}" ]] || { echo "[uc] Missing renderer: ${RENDER}" >&2; exit 1; }

"${RENDER}" \
  --palette "${PALETTE}" \
  --hypr "${HYPR_COLORS}" \
  --waybar "${WAYBAR_COLORS}" \
  --swaync "${SWAYNC_COLORS}" \
  --kitty "${KITTY_COLORS}" \
  --rofi  "${ROFI_COLORS}"

mkdir -p "$(dirname "${ROFI_FONT}")"
cat > "${ROFI_FONT}" <<EOF
/* Generated by UltraCandy Preset */
* { font: "${FONT_NAME} ${FONT_SIZE}"; }
EOF

HYPR_ENV="${HOME}/.config/hypr/env-ultracandy.conf"
mkdir -p "$(dirname "${HYPR_ENV}")"
cat > "${HYPR_ENV}" <<EOF
# Generated by UltraCandy Preset
env = XCURSOR_THEME,${CURSOR_THEME}
env = XCURSOR_SIZE,${CURSOR_SIZE}
env = HYPRCURSOR_THEME,${CURSOR_THEME}
env = HYPRCURSOR_SIZE,${CURSOR_SIZE}
EOF

if [[ -d "${PRESET_DIR}/overlays" ]]; then
  rsync -a "${PRESET_DIR}/overlays/" "${HOME}/.config/"
fi

hyprctl reload >/dev/null 2>&1 || true
systemctl --user restart waybar.service || {
  pkill waybar 2>/dev/null || true
  nohup waybar --config "${HOME}/.config/waybar/config.jsonc" --style "${HOME}/.config/waybar/style.css" >/dev/null 2>&1 &
}
pkill -f swaync 2>/dev/null || true
nohup swaync >/dev/null 2>&1 &

echo "[uc] Applied preset '${PRESET}' â†’ ${WALLPAPER}"